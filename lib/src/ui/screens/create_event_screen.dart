import 'dart:io';
import 'package:flutter/material.dart';
import 'package:screenshot/screenshot.dart';
import 'package:txt_invite/src/models/event.dart';
import 'package:txt_invite/src/models/event_status.dart';
import 'package:txt_invite/src/models/guest_list.dart';
import 'package:txt_invite/src/services/api.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/confirmation_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/event_details_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/event_settings_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/guest_list_management_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/invitation_customization_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/sms_status_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/template_selection_step.dart';


enum CreateEventSteps { 
  eventDetails,
  templateSelection,
  invitationCustomization,
  guestListManagement,
  eventSettings,
  confirmation,
  smsStatus
}
class CreateEventScreen extends StatefulWidget {
  const CreateEventScreen({super.key});

  @override
  State<CreateEventScreen> createState() => _CreateEventScreenState();
}

class _CreateEventScreenState extends State<CreateEventScreen> {
  final PageController _pageController = PageController();
  CreateEventSteps _currentPage = CreateEventSteps.eventDetails;

  final List<GlobalKey<FormState>> _formKeys = List.generate(6, (_) => GlobalKey<FormState>());
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  DateTime? _startTime;
  DateTime? _endTime;
  String? _selectedTemplate;
  String? _selectedGuestListId;
  bool _allowComments = true;
  bool _guestListVisible = false;
  bool _rsvpRequired = true;
  GuestList? _guestList;
  Event? _event;
  bool _isUploading = false;
  String? _invitationThumbnailImageUrl;

  final ScreenshotController _screenshotController = ScreenshotController();

  @override
  void dispose() {
    _pageController.dispose();
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();
  }

  void _nextPage(CreateEventSteps nextStep) async {
    if (_formKeys[_currentPage.index].currentState != null && _formKeys[_currentPage.index].currentState!.validate()) {
      if (_currentPage == CreateEventSteps.invitationCustomization) {
        setState(() {
          _isUploading = true;
        });
        final screenCap = await _screenshotController.capture();
        if (screenCap != null) {
          try {
            final user = await Api().auth.currentUser;
            final imgUrl = await Api().storage.uploadBytes(screenCap, 'invitations/${user!.id}_${DateTime.now().millisecondsSinceEpoch}_preview.png');
            setState(() {
              _invitationThumbnailImageUrl = imgUrl;
              _isUploading = false;
            });
          } catch (e) {
            setState(() {
              _isUploading = false;
            });
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Failed to upload invitation image: $e')),
            );
            return;
          }
        } else {
          setState(() {
            _isUploading = false;
          });
        }
      }
      _pageController.nextPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeIn,
      );
      setState(() {
        _currentPage = nextStep;
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please complete all required fields before proceeding.')),
      );
    }
  }

  void _previousPage(CreateEventSteps previousStep) {
    if (previousStep != CreateEventSteps.eventDetails) {
      _pageController.previousPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
      setState(() {
        _currentPage = previousStep;
      });
    }
  }

  Future<void> _createEvent() async {
    if (_formKeys[_currentPage.index].currentState != null && _formKeys[_currentPage.index].currentState!.validate()) {
      try {
        final guestList = await Api().guestLists.getGuestList(_selectedGuestListId!);
        if (guestList == null) {
          throw Exception('Selected guest list not found');
        }

        final testFilePath = _selectedTemplate;
        final file = File(testFilePath!);
        final user = await Api().auth.currentUser;
        final imgUrl = await Api().storage.uploadFile(file, 'invitations/${user!.id}_${DateTime.now().millisecondsSinceEpoch}.png');
        final newEvent = Event(
          id: '', // ID will be generated by Firestore
          title: _titleController.text,
          description: _descriptionController.text,
          startTime: _startTime!,
          endTime: _endTime!,
          guestListId: _selectedGuestListId!,
          invitationImageUrl: imgUrl,
          invitationImageThumbnailUrl: _invitationThumbnailImageUrl!,
          createdBy: user.id,
          status: EventStatus.active,
          inviteCount: guestList.guests.length,
        );

        final event = await Api().events.createEvent(newEvent);

        _pageController.animateToPage(
          CreateEventSteps.smsStatus.index,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeIn,
        );
        setState(() {
          _event = event;
          _guestList = guestList;
          _currentPage = CreateEventSteps.smsStatus;
        });
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to create event: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create New Event'),
      ),
      body: _isUploading
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 16),
                  Text('Uploading invitation...'),
                ],
              ),
            )
          : Column(
              children: [
                Expanded(
                  child: PageView(
                    controller: _pageController,
                  physics: const NeverScrollableScrollPhysics(), // Disable swiping
                  onPageChanged: (index) {
                    setState(() {
                      print("STTING PAGE ${CreateEventSteps.values[index]}");
                      _currentPage = CreateEventSteps.values[index];
                    });
                  },
                  children: [
                    EventDetailsStep(
                      formKey: _formKeys[0],
                      titleController: _titleController,
                      descriptionController: _descriptionController,
                      startTime: _startTime,
                      endTime: _endTime,
                      onStartTimeChanged: (dateTime) {
                        setState(() {
                          _startTime = dateTime;
                        });
                      },
                      onEndTimeChanged: (dateTime) {
                        setState(() {
                          _endTime = dateTime;
                        });
                      },
                    ),
                    TemplateSelectionStep(
                      formKey: _formKeys[1],
                      onTemplateSelected: (template) {
                        setState(() {
                          _selectedTemplate = template;
                        });
                      },
                    ),
                    Screenshot(
                      controller: _screenshotController,
                      child: InvitationCustomizationStep(
                        formKey: _formKeys[2],
                        selectedTemplate: _selectedTemplate,
                      )
                    ),
                    GuestListManagementStep(
                      formKey: _formKeys[3],
                      onGuestListSelected: (guestListId) {
                        setState(() {
                          _selectedGuestListId = guestListId;
                        });
                      },
                    ),
                    EventSettingsStep(
                      formKey: _formKeys[4],
                      allowComments: _allowComments,
                      guestListVisible: _guestListVisible,
                      rsvpRequired: _rsvpRequired,
                      onAllowCommentsChanged: (value) {
                        setState(() {
                          _allowComments = value;
                        });
                      },
                      onGuestListVisibleChanged: (value) {
                        setState(() {
                          _guestListVisible = value;
                        });
                      },
                      onRsvpRequiredChanged: (value) {
                        setState(() {
                          _rsvpRequired = value;
                        });
                      },
                    ),
                    ConfirmationStep(
                      formKey: _formKeys[5],
                      title: _titleController.text,
                      description: _descriptionController.text,
                      startTime: _startTime,
                      endTime: _endTime,
                      selectedTemplate: _selectedTemplate,
                      selectedGuestListId: _selectedGuestListId,
                      allowComments: _allowComments,
                      guestListVisible: _guestListVisible,
                      rsvpRequired: _rsvpRequired,
                    ),
                    SmsStatusScreen(event: _event, guestList: _guestList),
                  ],
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    // Do not show "Previous" button on the first step or last step
                    if (CreateEventSteps.values.indexOf(_currentPage) > 0 && CreateEventSteps.values.indexOf(_currentPage) < CreateEventSteps.values.length - 1)
                      ElevatedButton(
                        onPressed: () {
                          final previousStep = CreateEventSteps.values[CreateEventSteps.values.indexOf(_currentPage) - 1];
                          print('back to $previousStep');
                          _previousPage(previousStep);
                        },
                        child: const Text('Previous'),
                      )
                    else const SizedBox(width: 10,), // used to maintain spacing
                    if (_currentPage != CreateEventSteps.smsStatus && _currentPage != CreateEventSteps.confirmation)
                      ElevatedButton(
                        onPressed: () {
                          final nextStep = CreateEventSteps.values[CreateEventSteps.values.indexOf(_currentPage) + 1];
                          print('nextStep: $nextStep');
                          _nextPage(nextStep);
                        },
                        child: const Text('Next'),
                      )
                    else if (_currentPage == CreateEventSteps.confirmation)
                      ElevatedButton(
                        onPressed: _createEvent,
                        child: const Text('Create Event'),
                      )
                    else if (_currentPage == CreateEventSteps.smsStatus)
                      ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).pop(); 
                        },
                        child: const Text('Done'),
                      ),
                  ],
                ),
              ),
            ],
          )
    );
  }
}