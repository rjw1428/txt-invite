import 'dart:io';
import 'package:flutter/material.dart';
import 'package:screenshot/screenshot.dart';
import 'package:txt_invite/src/models/event.dart';
import 'package:txt_invite/src/models/event_status.dart';
import 'package:txt_invite/src/models/guest_list.dart';
import 'package:txt_invite/src/services/api.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/confirmation_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/event_details_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/event_settings_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/guest_list_management_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/invitation_customization_step.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/sms_status_screen.dart';
import 'package:txt_invite/src/ui/widgets/create_event_steps/template_selection_step.dart';

class CreateEventScreen extends StatefulWidget {
  const CreateEventScreen({super.key});

  @override
  State<CreateEventScreen> createState() => _CreateEventScreenState();
}

class _CreateEventScreenState extends State<CreateEventScreen> {
  final PageController _pageController = PageController();
  int _currentPage = 0;

  final List<GlobalKey<FormState>> _formKeys = List.generate(6, (_) => GlobalKey<FormState>());
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  DateTime? _startTime;
  DateTime? _endTime;
  String? _selectedTemplate;
  String? _selectedGuestListId;
  bool _allowComments = true;
  bool _guestListVisible = false;
  bool _rsvpRequired = true;
  late Event event;
  late GuestList guestList;

  final ScreenshotController _screenshotController = ScreenshotController();

  @override
  void dispose() {
    _pageController.dispose();
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();
  }

  Future<String> _fetchCurrentUser() async {
    final user = await Api().auth.currentUser;
    if (user == null) {
      throw Exception('User not logged in');
    }
    return user.id;
  }

  void _nextPage() {
    if (_formKeys[_currentPage].currentState != null && _formKeys[_currentPage].currentState!.validate()) {
      if (_currentPage < 5) { // Assuming 6 steps (0-5)
        _pageController.nextPage(
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeIn,
        );
        setState(() {
          _currentPage++;
        });
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please complete all required fields before proceeding.')),
      );
    }
  }

  void _previousPage() {
    if (_currentPage > 0) {
      _pageController.previousPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
      setState(() {
        _currentPage--;
      });
    }
  }

  Future<void> _createEvent() async {
    if (_formKeys[_currentPage].currentState != null && _formKeys[_currentPage].currentState!.validate()) {
      try {
        // final Uint8List? imageBytes = await _screenshotController.capture();

        // if (imageBytes == null) {
        //   throw Exception("Failed to capture invitation image");
        // }

        // final tempDir = await getTemporaryDirectory();
        // final file = await File('${tempDir.path}/invitation.png').create();
      
        // final imageUrl = await Api().storage.uploadFile(file, 'invitations/${DateTime.now().millisecondsSinceEpoch}.png');

        final testFilePath = _selectedTemplate;
        final file = File(testFilePath!);
        final user = await Api().auth.currentUser;
        final imgUrl = await Api().storage.uploadFile(file, 'invitations/${user!.id}_${DateTime.now().millisecondsSinceEpoch}.png');
        final currentUserId = await _fetchCurrentUser();
        final newEvent = Event(
          id: '', // ID will be generated by Firestore
          title: _titleController.text,
          description: _descriptionController.text,
          startTime: _startTime!,
          endTime: _endTime!,
          guestListId: _selectedGuestListId!,
          invitationImageUrl: imgUrl,
          createdBy: currentUserId,
          status: EventStatus.active,
        );

        final event = await Api().events.createEvent(newEvent);
        final guestList = await Api().guestLists.getGuestList(_selectedGuestListId!);

        if (guestList != null) {
          for (final guest in guestList.guests) {
            await Api().messaging.sendMessage(guest, event);
          }
        }

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Event created successfully and invitations sent!')),
        );
        Navigator.of(context).pop(); // Go back to home screen
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to create event: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create New Event'),
      ),
      body: Column(
              children: [
                Expanded(
                  child: PageView(
                    controller: _pageController,
                  physics: const NeverScrollableScrollPhysics(), // Disable swiping
                  onPageChanged: (index) {
                    setState(() {
                      _currentPage = index;
                    });
                  },
                  children: [
                    EventDetailsStep(
                      formKey: _formKeys[0],
                      titleController: _titleController,
                      descriptionController: _descriptionController,
                      startTime: _startTime,
                      endTime: _endTime,
                      onStartTimeChanged: (dateTime) {
                        setState(() {
                          _startTime = dateTime;
                        });
                      },
                      onEndTimeChanged: (dateTime) {
                        setState(() {
                          _endTime = dateTime;
                        });
                      },
                    ),
                    TemplateSelectionStep(
                      formKey: _formKeys[1],
                      onTemplateSelected: (template) {
                        setState(() {
                          _selectedTemplate = template;
                        });
                      },
                    ),
                    Screenshot(
                      controller: _screenshotController,
                      child: InvitationCustomizationStep(
                        formKey: _formKeys[2],
                        selectedTemplate: _selectedTemplate,
                        // screenshotController: _screenshotController,
                      )
                    ),
                    GuestListManagementStep(
                      formKey: _formKeys[3],
                      onGuestListSelected: (guestListId) {
                        setState(() {
                          _selectedGuestListId = guestListId;
                        });
                      },
                    ),
                    EventSettingsStep(
                      formKey: _formKeys[4],
                      allowComments: _allowComments,
                      guestListVisible: _guestListVisible,
                      rsvpRequired: _rsvpRequired,
                      onAllowCommentsChanged: (value) {
                        setState(() {
                          _allowComments = value;
                        });
                      },
                      onGuestListVisibleChanged: (value) {
                        setState(() {
                          _guestListVisible = value;
                        });
                      },
                      onRsvpRequiredChanged: (value) {
                        setState(() {
                          _rsvpRequired = value;
                        });
                      },
                    ),
                    ConfirmationStep(
                      formKey: _formKeys[5],
                      title: _titleController.text,
                      description: _descriptionController.text,
                      startTime: _startTime,
                      endTime: _endTime,
                      selectedTemplate: _selectedTemplate,
                      selectedGuestListId: _selectedGuestListId,
                      allowComments: _allowComments,
                      guestListVisible: _guestListVisible,
                      rsvpRequired: _rsvpRequired,
                    ),
                    SmsStatusScreen(event: event, guestList: guestList)
                  ],
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    if (_currentPage > 0)
                      ElevatedButton(
                        onPressed: _previousPage,
                        child: const Text('Previous'),
                      ),
                    if (_currentPage < 5)
                      ElevatedButton(
                        onPressed: _nextPage,
                        child: const Text('Next'),
                      ) else
                      ElevatedButton(
                        onPressed: _createEvent,
                        child: const Text('Create Event'),
                      ),
                  ],
                ),
              ),
            ],
          )
    );
  }
}